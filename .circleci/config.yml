version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          AWS_REGION: us-east-1

      - image: quay.io/azavea/postgis:2.3-postgres9.6-slim
        name: database.service.internal
        environment:
          - POSTGRES_USER=granary
          - POSTGRES_PASSWORD=granary
          - POSTGRES_DB=granary

    steps:
      - checkout

      # https://circleci.com/docs/2.0/building-docker-images/
      - setup_remote_docker:
          docker_layer_caching: false

      - restore_cache:
          keys:
            - sbt-cache-{{ checksum "project/Dependencies.scala" }}

      - run:
          command: sbt test:compile
          working_directory: ~/app-backend

      - save_cache:
          paths:
            - ~/.ivy2/cache
            - ~/.sbt
            - ~/.cache/coursier
          key: sbt-cache-{{ checksum "project/Dependencies.scala" }}

      - run:
          name: cibuild
          command: ./scripts/cibuild

      - run:
          name: cipublish
          command: |
            if [[ "${CIRCLE_BRANCH}" =~ ^master|^release/.*$|^hotfix/.*$|^jrb/ecs ]]; then
              ./scripts/cipublish
            fi

      - run:
          name: Slack notification
          command: |
            if [[ ! "${CIRCLE_BRANCH}" =~ ^master|^release/.*$|^hotfix/.*$ && ! -v CIRCLE_PULL_REQUEST ]]; then
              exit 0
            fi
            # Assemble an appropriate error message for Slack for branches that
            # pass the conditionals above.
            slackMessage=":jenkins-angry: *Granary (${CIRCLE_BRANCH}) #${CIRCLE_BUILD_NUM}*"
            if [[ -v CIRCLE_PULL_REQUEST ]]; then
              pr_number="$(echo "${CIRCLE_PULL_REQUEST}" | cut -d'/' -f7)"
              pr_data="$(curl -s "https://api.github.com/repos/raster-foundry/granary/pulls/${pr_number}")"
              pr_title="$(echo "${pr_data}" | jq -r .title)"
              pr_author="$(echo "${pr_data}" | jq -r .user.login)"

              slackMessage+="\n${pr_title} - ${pr_author}"
            fi
            slackMessage+="\n<${CIRCLE_BUILD_URL}|View Build>"
            curl -X POST \
              --data-urlencode "payload={\"attachments\":[{\"color\":\"danger\",\"fields\":[{\"value\":\"${slackMessage}\", \"short\":false}]}]}" \
              "${SLACK_WEBHOOK_URL}"
          when: on_fail

      - run:
          name: Slack notification
          command: |
            if [[ ! -v CIRCLE_PREVIOUS_BUILD_NUM ]]; then
              exit 0
            fi
            if [[ ! "${CIRCLE_BRANCH}" =~ ^master|^release/.*$|^hotfix/.*$ && ! -v CIRCLE_PULL_REQUEST ]]; then
              exit 0
            fi
            outcome="$(curl -s "https://circleci.com/api/v1.1/project/gh/raster-foundry/granary/${CIRCLE_PREVIOUS_BUILD_NUM}" | jq -r .outcome)"
            if [[ "${outcome}" = "success" ]]; then
              exit 0
            fi
            # Assemble an appropriate success message for Slack for branches
            # that are fixed and pass the conditionals above.
            slackMessage=":jenkins: *Granary (${CIRCLE_BRANCH}) #${CIRCLE_BUILD_NUM}*"
            if [[ -v CIRCLE_PULL_REQUEST ]]; then
              pr_number="$(echo "${CIRCLE_PULL_REQUEST}" | cut -d'/' -f7)"
              pr_data="$(curl -s "https://api.github.com/repos/raster-foundry/granary/pulls/${pr_number}")"
              pr_title="$(echo "${pr_data}" | jq -r .title)"
              pr_author="$(echo "${pr_data}" | jq -r .user.login)"

              slackMessage+="\n${pr_title} - ${pr_author}"
            fi
            slackMessage+="\n<${CIRCLE_BUILD_URL}|View Build>"
            curl -X POST \
              --data-urlencode "payload={\"attachments\":[{\"color\":\"good\",\"fields\":[{\"value\":\"${slackMessage}\", \"short\":false}]}]}" \
              "${SLACK_WEBHOOK_URL}"
          when: on_success

  deploy:
    docker:
      - image: quay.io/azavea/terraform:0.12.13

    steps:
      - checkout

      - run:
          name: infra
          command: |
            ./scripts/infra plan
            ./scripts/infra apply
          environment:
            GRANARY_DEBUG: 1
            GRANARY_SETTINGS_BUCKET: rasterfoundry-production-config-us-east-1

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only:
                - /^(.*)$/
      - deploy:
          requires:
            - build
          context: terraform
          filters:
            tags:
              only:
                - /^(.*)$/
            branches:
              only:
                - master
                - /release\/.*/
                - /hotfix\/.*/
                - jrb/ecs
