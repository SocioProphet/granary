#!/bin/bash

set -e

if [[ -n "${GRANARY_DEBUG}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "Usage: $(basename "$0") COMMAND OPTION[S]
Execute Terraform subcommands with remote state management.
"
}

if [[ -n "${GIT_COMMIT}" ]]; then
    GIT_COMMIT="${GIT_COMMIT:0:7}"
else
    GIT_COMMIT="$(git rev-parse --short HEAD)"
fi

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        TERRAFORM_DIR="$(dirname "$0")/../deployment/terraform"
        echo
        echo "Attempting to deploy application version [${GIT_COMMIT}]..."
        echo "-----------------------------------------------------"
        echo
    fi

    if [[ -n "${GRANARY_SETTINGS_BUCKET}" ]]; then
        pushd "${TERRAFORM_DIR}"

        aws s3 cp "s3://${GRANARY_SETTINGS_BUCKET}/${GRANARY_SETTINGS_BUCKET_KEY}/terraform.tfvars" "${GRANARY_SETTINGS_BUCKET}.tfvars"

        case "${1}" in
        plan)
            # Clear stale modules & remote state, then re-initialize
            rm -rf .terraform terraform.tfstate*
            terraform init \
                -backend-config="bucket=${GRANARY_SETTINGS_BUCKET}" \
                -backend-config="key=${GRANARY_SETTINGS_BUCKET_KEY}/state"

            terraform plan \
                -var="image_tag=${GIT_COMMIT}" \
                -var-file="${GRANARY_SETTINGS_BUCKET}.tfvars" \
                -out="${GRANARY_SETTINGS_BUCKET}.tfplan"
            ;;
        apply)
            terraform apply "${GRANARY_SETTINGS_BUCKET}.tfplan"
            ;;
        *)
            echo "ERROR: I don't have support for that Terraform subcommand!"
            exit 1
            ;;
        esac

        popd
    else
        echo "ERROR: No GRANARY_SETTINGS_BUCKET variable defined."
        exit 1
    fi
fi
